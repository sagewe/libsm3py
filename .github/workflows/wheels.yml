name: Build Wheels

on:
  workflow_dispatch:
    inputs:
      source:
        description: 'source branch'
        required: true
      type:
        description: 'publish type, test or testpypi or pypi'
        required: false
        default: 'test'

jobs:
  build:
    name: build wheel on ${{ matrix.platform.image_tag }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platform: [
          { target: "x86_64-unknown-linux-musl", image_tag: "x86_64-musl" },
          { target: "i686-unknown-linux-musl", image_tag: "i686-musl" },
          { target: "aarch64-unknown-linux-musl", image_tag: "aarch64-musl" },
          { target: "armv7-unknown-linux-musleabihf", image_tag: "armv7-musleabihf" },
          { target: "powerpc64le-unknown-linux-musl", image_tag: "powerpc64le-musl" },
        ]
    container:
      image: docker://messense/rust-musl-cross:${{ matrix.platform.image_tag }}
      env:
        CFLAGS_armv7_unknown_linux_musleabihf: '-mfpu=vfpv3-d16'
    steps:
    - uses: actions/checkout@v2
      with:
        ref: ${{github.event.inputs.source}}
    - uses: actions/setup-python@v2
      with:
        python-version: "3.6"
    - uses: actions/setup-python@v2
      with:
        python-version: "3.7"
    - uses: actions/setup-python@v2
      with:
        python-version: "3.8"
    - uses: actions/setup-python@v2
      with:
        python-version: "3.9"
    - uses: actions/setup-python@v2
      with:
        python-version: "3.10"
    - name: Build Wheels - manylinux
      uses: messense/maturin-action@main
      with:
        target: ${{ matrix.platform.target }}
        manylinux: auto
        container: off
        args: --release --no-sdist -o dist

    - name: Build Wheels - musllinux
      uses: messense/maturin-action@main
      with:
        target: ${{ matrix.platform.target }}
        manylinux: musllinux_1_1
        container: off
        args: --release --no-sdist -o dist

    - name: Upload wheels
      uses: actions/upload-artifact@v2
      with:
        name: wheels
        path: dist

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [ build ]
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: wheels
          path: dist
      - uses: actions/setup-python@v2
        with:
          python-version: 3.6
      - name: Twine check
        run: |
          pip install -U twine
          twine check dist/*
      - name: Test Install
        run: |
          pip install -U pip
          pip install --find-link=dist/ libsm3py
      - name: Upload to PyPI Test
        if: ${{ github.event.inputs.type == 'testpypi' }}
        run: |
          twine upload --repository testpypi dist/* --verbose
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.pypitest_token }}

      - name: Upload to PyPI
        if: ${{ github.event.inputs.type == 'pypi' }}
        run: |
          twine upload dist/* --verbose
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.pypi_token }}
